//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Please try to keep this build file as similar to the other family build files
// as is possible.
//
import java.time.Instant
import java.util.regex.Pattern


// ----------------------------------------------------------------
// Plugins
// ----------------------------------------------------------------

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'maven-publish'

    // handy plugin for discovering task dependencies
    //id 'com.dorongold.task-tree' version "1.5"
}


// ----------------------------------------------------------------
// Constants
// ----------------------------------------------------------------

ext {
    CBL_GROUP = 'com.couchbase.lite'
    CBL_ARTIFACT_ID = 'couchbase-lite-android'
    CBL_DESCRIPTION = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
    CBL_LICENSE = 'Couchbase, Inc. Community Edition License Agreement'
    CBL_LICENSE_URL = "https://raw.githubusercontent.com/couchbase/product-texts/${getLicenseVersion()}/mobile/couchbase-lite/license/LICENSE_community.txt"
    CBL_PROJECT_URL = 'https://github.com:couchbase/couchbase-lite-java-ce-root.git'
    CBL_ISSUES_URL = 'https://github.com/couchbase/couchbase-lite-java-ce-root/issues'
    CBL_SITE_URL = 'https://developer.couchbase.com/mobile/'

    BUILD_TIME = Instant.now().toString()
    BUILD_RELEASE = file("${ROOT_DIR}/version.txt").text.trim()
    BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    BUILD_VERSION = "${BUILD_RELEASE}-${BUILD_NUMBER}"
    BUILD_COMMIT = getBuildId()

    CBL_COMMON_ROOT_DIR = "${ROOT_DIR}/common"
    CBL_COMMON_DIR = "${CBL_COMMON_ROOT_DIR}/common"
    CBL_CE_ROOT_DIR = "${ROOT_DIR}/ce"
    CBL_CE_COMMON_DIR = "${CBL_CE_ROOT_DIR}/common"
    CBL_COMMON_ANDROID_DIR = "${CBL_COMMON_ROOT_DIR}/android"
    CBL_COMMON_ETC_DIR = "${CBL_COMMON_ROOT_DIR}/etc"

    REPORTS_DIR = "${buildDir}/reports"

    DEPENDENCIES = ['okio', 'okhttp']
    OKHTTP_VERSION = '4.12.0'
    SPOTBUGS_VERSION = '4.7.3'
}

// comma separated list of annotations for tests that should not be run.
// e.g., -PtestFilter='com.couchbase.lite.internal.utils.SlowTest,com.couchbase.lite.internal.utils.VerySlowTest'
def TEST_FILTER = (!project.hasProperty("testFilter")) ? null : testFilter.replaceAll("\\s", "")

// Target repo for maven publish
def MAVEN_URL = (!project.hasProperty("mavenUrl")) ? null : mavenUrl


// ----------------------------------------------------------------
// Build
// ----------------------------------------------------------------

group = CBL_GROUP
version = BUILD_VERSION

// don't strip symbols from the debug build
androidComponents {
    onVariants(selector().withBuildType("debug")) {
        packaging.jniLibs.keepDebugSymbols.add("**/*so")
    }
}

android {
    namespace 'com.couchbase.lite'

    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    // if you change this, be sure to update $ROOT/etc/jenkins/install_android_toolchain.sh
    ndkVersion '25.1.8937393' //'25.0.8775105'

    externalNativeBuild {
        cmake {
            // if you change this, be sure to update /etc/jenkins/build.sh
            version "3.25.0"
            path "${CBL_COMMON_DIR}/CMakeLists.txt"
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions { jvmTarget = '1.8' }

    buildFeatures { buildConfig true }

    defaultConfig {
        minSdkVersion ANDROID_MIN_SDK
        targetSdkVersion ANDROID_TARGET_SDK
        versionCode 30200
        versionName BUILD_VERSION
        project.archivesBaseName = "${CBL_ARTIFACT_ID}-${versionName}"

        externalNativeBuild {
            cmake { targets 'LiteCoreJNI' }
        }

        buildConfigField "String", "VERSION_NAME", "\"${BUILD_VERSION}\""
        buildConfigField "String", "BUILD_TIME", "\"${BUILD_TIME}\""
        buildConfigField "String", "BUILD_COMMIT", "\"${BUILD_COMMIT}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        if (TEST_FILTER != null) { testInstrumentationRunnerArguments.notAnnotation = TEST_FILTER }

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            ndk.debugSymbolLevel 'FULL'

            debuggable true
            minifyEnabled false

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_STL=c++_static',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_PLATFORM=android-22',
                        '-DCMAKE_BUILD_TYPE=Debug'
                    cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                }
            }

            buildConfigField "boolean", "ENTERPRISE", "false"
            buildConfigField "boolean", "CBL_DEBUG", "true"
        }

        release {
            debuggable false
            minifyEnabled false

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_STL=c++_static',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_PLATFORM=android-22',
                        '-DCMAKE_BUILD_TYPE=RelWithDebInfo'
                    cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                }
            }

            buildConfigField "boolean", "ENTERPRISE", "false"
            buildConfigField "boolean", "CBL_DEBUG", "false"
        }
    }

    sourceSets {
        main {
            manifest.srcFile "${CBL_COMMON_ANDROID_DIR}/main/AndroidManifest.xml"
            java.srcDirs = [
                "${CBL_COMMON_DIR}/main/java",                   // Common
                "${CBL_COMMON_ANDROID_DIR}/main/java",           // Common Android
                "${CBL_CE_COMMON_DIR}/main/java",                // CE Common
                "${projectDir}/src/main/java",
            ]
            res.srcDirs = [
                "${CBL_COMMON_ANDROID_DIR}/main/res",            // Common resources
            ]
        }
        debug {
            manifest.srcFile "${CBL_COMMON_ANDROID_DIR}/debug/AndroidManifest.xml"
        }
        androidTest {
            java.srcDirs = [
                "${CBL_COMMON_DIR}/test/java",                   // Common tests
                "${CBL_COMMON_ANDROID_DIR}/androidTest/java",    // Common Android tests
                "${CBL_CE_COMMON_DIR}/test/java",                // CE Common tests
                "${projectDir}/src/androidTest/java",            // CE Android tests
            ]
            assets.srcDirs = [
                "${CBL_COMMON_DIR}/test/assets",                 // Common assets
            ]
            res.srcDirs = [
                "${CBL_COMMON_ANDROID_DIR}/androidTest/res",     // Common test resources
            ]
        }
    }

    lintOptions {
        disable 'UseSparseArrays'
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.3.0'
    compileOnly "com.github.spotbugs:spotbugs-annotations:${SPOTBUGS_VERSION}"

    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${KOTLIN_VERSION}"
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:${KOTLIN_VERSION}"

    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


// ----------------------------------------------------------------
// Documentations
// ----------------------------------------------------------------

task javadoc(type: Javadoc) {
    failOnError false

    afterEvaluate { dependsOn generateReleaseBuildConfig, generateReleaseRFile, compileReleaseKotlin }

    source android.sourceSets.main.java.srcDirs
    exclude "com/couchbase/lite/internal/**"

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.files(android.sourceSets.main.java.srcDirs.join(File.pathSeparator))
    classpath += project.files("${buildDir}/generated/source/buildConfig/release")
    afterEvaluate {
        classpath += files(
            android.libraryVariants.collect { variant ->
                if (variant.name == "release") { variant.javaCompileProvider.get().classpath.files }
            })
    }

    options {
        title = "${CBL_LICENSE} ${BUILD_VERSION}"
        memberLevel = JavadocMemberLevel.PROTECTED
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        links "https://docs.oracle.com/en/java/javase/11/docs/api"
        addStringOption('Xdoclint:none', '-quiet')
        if (JavaVersion.current() > JavaVersion.VERSION_1_8) { addBooleanOption('-ignore-source-errors', true) }
    }
}


// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def FILE_FILTER = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/gen/**', "okhttp3/**"]

/////// Checkstyle
checkstyle {
    toolVersion = "8.42"
    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${toolVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.39.0"
        checkstyle fileTree(dir: "${CBL_COMMON_ETC_DIR}/checkstyle", include: ['kotlin-checks-0.9.jar'])
    }

    configFile file("${CBL_COMMON_ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${CBL_COMMON_ETC_DIR}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    source android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            required = true
            outputLocation = file("${REPORTS_DIR}/checkstyle.xml")
        }
        html {
            required = true
            outputLocation = file("${REPORTS_DIR}/checkstyle.html")
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.26.0'
    ruleSets = []
}
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${CBL_COMMON_ETC_DIR}/pmd/pmd.xml")

    source = android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            required = true
            outputLocation = file("${REPORTS_DIR}/pmd.xml")
        }
        html {
            required = true
            outputLocation = file("${REPORTS_DIR}/pmd.html")
        }
    }
}

/////// SpotBugs
// If SpotBug is run on code generated with Java 11
// it will generate quite a few extraneous NULLCHECK warnings.
// Sadly the problem is Java 11 code generation: the only solution
// is to disable the check.
spotbugs { toolVersion = SPOTBUGS_VERSION }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: com.github.spotbugs.snom.SpotBugsTask) {
        description "Spotbugs with ${reportType} report"
        group 'verification'

        afterEvaluate { dependsOn generateDebugRFile, generateReleaseRFile, compileDebugKotlin, compileReleaseKotlin, compileDebugJavaWithJavac }

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        sourceDirs = project.files(android.sourceSets.main.java.srcDirs)

        classDirs = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes")

        android.getBootClasspath().each { dir -> auxClassPaths += project.files(dir) }
        afterEvaluate {
            android.libraryVariants.collect { variant ->
                auxClassPaths += project.files(variant.javaCompileProvider.get().classpath.files)
            }
        }

        excludeFilter = file("${CBL_COMMON_ETC_DIR}/spotbugs/spotbugs.xml")
        onlyAnalyze = ['com.couchbase.lite.-']

        reports {
            xml {
                required = (reportType == "Xml")
                outputLocation = file("${REPORTS_DIR}/spotbugs.xml")
            }
            html {
                required = (reportType == "Html")
                outputLocation = file("${REPORTS_DIR}/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
}


// ----------------------------------------------------------------
// Publication
// ----------------------------------------------------------------

/////// Maven Publishing
// https://docs.gradle.org/current/userguide/publishing_maven.html

def mavenRepoUser = System.getenv("MAVEN_REPO_USR")
def mavenRepoPass = System.getenv("MAVEN_REPO_PASS")

// Annoying workaround for Android POM generation
def pomConfig = {
    name "${CBL_GROUP}:${CBL_ARTIFACT_ID}"
    description CBL_DESCRIPTION
    url CBL_SITE_URL
    licenses {
        license {
            name CBL_LICENSE
            url CBL_LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Couchbase Mobile"
            email "mobile@couchbase.com"
            organization 'Couchbase'
            organizationUrl 'https://www.couchbase.com'
        }
    }
    issueManagement {
        system 'github'
        url CBL_ISSUES_URL
    }
    scm {
        url CBL_SITE_URL
        connection CBL_PROJECT_URL
        developerConnection CBL_PROJECT_URL
    }
}

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = "${CBL_ARTIFACT_ID}"
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Generate source.jar
task sourcesJar(type: Jar) {
    archiveBaseName = "${CBL_ARTIFACT_ID}"
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    repositories {
        maven {
            url MAVEN_URL
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {
            libRelease(MavenPublication) {
                groupId CBL_GROUP
                artifactId CBL_ARTIFACT_ID
                version BUILD_VERSION

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                // include dependencies
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', CBL_DESCRIPTION)
                    root.children().last() + pomConfig

                    def dependenciesNode = root.appendNode('dependencies')

                    // Include only configured dependencies
                    configurations.implementation.allDependencies.each {
                        if (DEPENDENCIES.contains(it.name)) {
                            def dep = dependenciesNode.appendNode('dependency')
                            dep.appendNode('groupId', it.group)
                            dep.appendNode('artifactId', it.name)
                            dep.appendNode('version', it.version)
                        }
                    }
                }
            }

            libDebug(MavenPublication) {
                groupId CBL_GROUP
                artifactId CBL_ARTIFACT_ID
                version BUILD_VERSION

                artifact bundleDebugAar
                artifact sourcesJar
                artifact javadocJar

                // include dependencies
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', CBL_DESCRIPTION)
                    root.children().last() + pomConfig

                    def dependenciesNode = root.appendNode('dependencies')

                    // Include only configured dependencies
                    configurations.implementation.allDependencies.each {
                        if (DEPENDENCIES.contains(it.name)) {
                            def dep = dependenciesNode.appendNode('dependency')
                            dep.appendNode('groupId', it.group)
                            dep.appendNode('artifactId', it.name)
                            dep.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------

///////// Dev tasks
task smokeTest(dependsOn: ['clean', 'compileDebugSources', 'checkstyle', 'lint', 'pmd', 'spotbugsHtml'])
// if there is a ce_android-ktx project, its dev tests will run
gradle.projectsEvaluated {
    if (!(rootProject.subprojects.any { it.name == 'ce_android-ktx' })) {
        task devTest(dependsOn: ['connectedDebugAndroidTest'])
    }
}
task devPublish(dependsOn: ['publishLibDebugPublicationToMavenLocal'])

///////// CI tasks
task ciCheck(dependsOn: ['checkstyle', 'lint', 'pmd', 'spotbugsXml', 'test'])
task ciBuild(dependsOn: ['assembleRelease'])
task ciPublish(dependsOn: ['javadocJar', 'generatePomFileForLibReleasePublication', 'publishLibReleasePublicationToMavenRepository'])

// ordering (roughly last to first)
project.afterEvaluate {
    tasks.withType(Javadoc) { shouldRunAfter connectedDebugAndroidTest }
    connectedDebugAndroidTest.shouldRunAfter smokeTest
    testDebugUnitTest.shouldRunAfter smokeTest
    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) { shouldRunAfter tasks.withType(Pmd) }
    tasks.withType(Pmd) { shouldRunAfter tasks.withType(Checkstyle) }
    tasks.withType(Checkstyle) { shouldRunAfter compileDebugSources }
}

// Clean
// delete .cxx directory to force rerun of cmake.
// This is necessary because 'clean' deletes the file 'zconf.h' which is in
// .../build/intermediates, causing subsequent builds to fail.
clean.doLast { project.delete "${projectDir}/.cxx" }


// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------

def getLicenseVersion() { return getCommit("product-texts", "master") }

def getBuildId() {
    def hostname = "rogue"
    try { hostname = "hostname".execute().text.trim() }
    catch (Exception ignore) { }

    return "${getCommit("couchbase-lite-java-ce-root", "unofficial").substring(0, 10)}@${hostname}"
}

def getCommit(project, dflt) {
    def manifest = null
    try {
        manifest = new FileReader("${ROOT_DIR}/../manifest.xml")

        def revEx = Pattern.compile("<project.* name=\"${project}\".* revision=\"([\\dabcdef]{40})\"")

        def l
        while ((l = manifest.readLine()) != null) {
            def m = revEx.matcher(l)
            if (m.find()) { return m.group(1) }
        }
    }
    catch (Exception ignore) { }
    finally {
        if (manifest != null) {
            try { manifest.close() }
            catch (Exception ignore) { }
        }
    }

    return dflt
}
