//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Please try to keep this build file as similar to the other family build files
// as is possible.
//
import com.android.build.gradle.tasks.LintGlobalTask
import com.github.spotbugs.SpotBugsTask

import java.time.Instant
import java.util.regex.Pattern


// ----------------------------------------------------------------
// Plugins
// ----------------------------------------------------------------

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'

    // handy plugin for discovering task dependencies
    //id 'com.dorongold.task-tree' version "1.5"
}


// ----------------------------------------------------------------
// Constants
// ----------------------------------------------------------------

ext {
    CBL_GROUP = 'com.couchbase.lite'
    CBL_ARTIFACT_ID = 'couchbase-lite-android'
    CBL_DESCRIPTION = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
    CBL_LICENSE = 'Couchbase, Inc. Community Edition License Agreement'
    CBL_LICENSE_URL = "https://raw.githubusercontent.com/couchbase/product-texts/${getLicenseVersion()}/mobile/couchbase-lite/license/LICENSE_community.txt"
    CBL_PROJECT_URL = 'https://github.com:couchbase/couchbase-lite-java-ce-root.git'
    CBL_ISSUES_URL = 'https://github.com/couchbase/couchbase-lite-java-ce-root/issues'
    CBL_SITE_URL = 'https://developer.couchbase.com/mobile/'

    BUILD_TIME = Instant.now().toString()
    BUILD_RELEASE = file("${ROOT_DIR}/version.txt").text.trim()
    BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    BUILD_VERSION = "${BUILD_RELEASE}-${BUILD_NUMBER}"
    BUILD_COMMIT = getBuildId()

    CBL_CORE_DIR = "${ROOT_DIR}/core"
    CBL_CE_ROOT_DIR = "${ROOT_DIR}/ce"
    CBL_COMMON_ROOT_DIR = "${ROOT_DIR}/common"
    CBL_COMMON_DIR = "${CBL_COMMON_ROOT_DIR}/common"
    CBL_CE_COMMON_DIR = "${CBL_CE_ROOT_DIR}/common"
    CBL_COMMON_ANDROID_DIR = "${CBL_COMMON_ROOT_DIR}/android"

    LIB_MODULE_DIR = "${PROJECT_DIR}/lib"
    REPORTS_DIR = "${buildDir}/reports"
    ETC_DIR = "${CBL_COMMON_ROOT_DIR}/etc"

    DEPENDENCIES = ['okio', 'okhttp']
    OKHTTP_VERSION = "3.14.7"
}

// defining this property in the file ~/.gradle/gradle.properties
// can dramatically reduce your build time.
def TARGET_ABIS = (!hasProperty("targetAbis")) ? null : targetAbis.split(', *')

// comma separated list of annotations for tests that should not be run.
def TEST_FILTER = (!project.hasProperty("testFilter")) ? null : testFilter

// Target repo for maven publish
def MAVEN_URL = (!project.hasProperty("mavenUrl")) ? null : mavenUrl

// local.properties
Properties properties = new Properties()
properties.load(project.rootProject.file("${PROJECT_DIR}/local.properties").newDataInputStream())


// ----------------------------------------------------------------
// Build
// ----------------------------------------------------------------

group = CBL_GROUP
version = BUILD_VERSION

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    // if you change this, be sure to update /etc/jenkins/build.sh
    ndkVersion '21.3.6528147'

    defaultConfig {
        minSdkVersion ANDROID_MIN_SDK
        //noinspection OldTargetApi
        targetSdkVersion ANDROID_TARGET_SDK
        versionCode 20806
        versionName BUILD_VERSION
        project.archivesBaseName = "${CBL_ARTIFACT_ID}-${versionName}"

        // if no specific ABIs specified, build all supported.
        if (TARGET_ABIS != null) {
            ndk { abiFilters TARGET_ABIS }
        }

        externalNativeBuild {
            cmake { targets 'LiteCoreJNI' }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        if (TEST_FILTER != null) {
            testInstrumentationRunnerArguments notAnnotation: TEST_FILTER
        }
    }

    kotlinOptions { jvmTarget = '1.8' }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    buildTypes {
        // NOTE: testCoverageEnabled is managed in the `coverage` task

        debug {
            buildConfigField "String", "BUILD_TIME", "\"${BUILD_TIME}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${BUILD_COMMIT}\""
            buildConfigField "boolean", "ENTERPRISE", "false"
            buildConfigField "boolean", "CBL_DEBUG", "true"

            debuggable true
            minifyEnabled false

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_STL=c++_static', "-DANDROID_TOOLCHAIN=clang", '-DANDROID_PLATFORM=android-19', '-DCMAKE_BUILD_TYPE=Debug'
                    cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                }
            }
        }

        release {
            buildConfigField "String", "BUILD_TIME", "\"${BUILD_TIME}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${BUILD_COMMIT}\""
            buildConfigField "boolean", "ENTERPRISE", "false"
            buildConfigField "boolean", "CBL_DEBUG", "false"

            debuggable false
            minifyEnabled false
            testCoverageEnabled false

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_STL=c++_static', "-DANDROID_TOOLCHAIN=clang", '-DANDROID_PLATFORM=android-19', '-DCMAKE_BUILD_TYPE=RelWithDebInfo'
                    cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            // if you change this, be sure to update /etc/jenkins/build.sh
            version "3.10.2"
            path "${CBL_COMMON_DIR}/CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            manifest.srcFile "${CBL_COMMON_ANDROID_DIR}/main/AndroidManifest.xml"
            java.srcDirs = [
                "${CBL_COMMON_DIR}/main/java",                   // Common
                "${CBL_COMMON_ANDROID_DIR}/main/java",           // Common Android
                "${CBL_CE_COMMON_DIR}/main/java",                // CE Common
                "src/main/java",
            ]
            res.srcDirs = [
                "${CBL_COMMON_ANDROID_DIR}/main/res",            // Common resources
            ]
        }
        debug {
            manifest.srcFile "${CBL_COMMON_ANDROID_DIR}/debug/AndroidManifest.xml"
        }
        androidTest {
            manifest.srcFile "${CBL_COMMON_ANDROID_DIR}/androidTest/AndroidManifest.xml"
            java.srcDirs = [
                "${CBL_COMMON_DIR}/test/java",                   // Common tests
                "${CBL_COMMON_ANDROID_DIR}/androidTest/java",    // Common Android tests
                "${CBL_CE_COMMON_DIR}/test/java",                // CE Common tests
            ]
            assets.srcDirs = [
                "${CBL_CORE_DIR}/C/tests/data",                  // lite-core test assets
                "${CBL_COMMON_DIR}/test/assets",                 // Common assets
            ]
            res.srcDirs = [
                "${CBL_COMMON_ANDROID_DIR}/androidTest/res",     // Common test resources
            ]
        }
    }

    lintOptions {
        disable 'UseSparseArrays'
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    compileOnly 'com.android.support:support-annotations:28.0.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.0.3'

    //noinspection GradleDependency
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
    testImplementation 'junit:junit:4.12'

    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

/////// JavaDoc

// Say something once, why say it again?  Because gradle.
// This is the only way I could figure out, to get some of these things onto the javadoc classpath
// This is just and extreme hack.  My apologies.
configurations { javadocDeps }
dependencies {
    javadocDeps files("${buildDir}/generated/source/buildConfig/debug")
    javadocDeps files("${buildDir}/generated/source/buildConfig/release")
    //noinspection GradleDependency
    javadocDeps 'com.android.support:support-annotations:28.0.0'
    javadocDeps 'com.github.spotbugs:spotbugs-annotations:4.0.3'
    //noinspection GradleDependency
    javadocDeps "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"
}

task javadoc(type: Javadoc) {
    failOnError false

    source android.sourceSets.main.java.srcDirs

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    classpath += configurations.javadocDeps

    options {
        title = "${CBL_LICENSE} ${BUILD_VERSION}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        links "https://docs.oracle.com/javase/8/docs/api/"
        linksOffline "https://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"
        addStringOption('Xdoclint:none', '-quiet')
    }
}


// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def FILE_FILTER = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/gen/**', "okhttp3/**"]

/////// Checkstyle
checkstyle {
    toolVersion = "8.35"

    configFile file("${ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${ETC_DIR}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    source android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.html"))
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.26.0'
    ruleSets = []
}
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${ETC_DIR}/pmd/pmd.xml")

    source = android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.html"))
        }
    }
}

/////// SpotBugs
// If SpotBug is run on code generated with Java 11
// it will generate quite a few extraneous NULLCHECK warnings.
// Sadly the problem is Java 11 code generation: the only solution
// is to disable the check.
spotbugs { toolVersion = '4.1.1' }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: SpotBugsTask) {
        description "Spotbugs with ${reportType} report"
        group 'verification'

        afterEvaluate { dependsOn tasks.find { t -> t.name.endsWith 'compileDebugSources' } }

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        source = android.sourceSets.main.java.srcDirs.collect {
            dir -> fileTree(dir: dir, include: '**/*.java').getFiles()
        }.flatten()

        classes = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: FILE_FILTER)
        classpath = files()

        excludeFilter = file("${ETC_DIR}/spotbugs/spotbugs.xml")

        reports {
            xml {
                enabled = (reportType == "Xml")
                setDestination(file("${REPORTS_DIR}/spotbugs.xml"))
            }
            html {
                enabled = (reportType == "Html")
                setDestination(file("${REPORTS_DIR}/spotbugs.html"))
            }
        }
    }
}


// ----------------------------------------------------------------
// Coverage
// ----------------------------------------------------------------

jacoco { toolVersion = JACOCO_VERSION }

task coverage(dependsOn: ['createDebugCoverageReport', 'coveralls']) {
    android.buildTypes.findByName('debug').testCoverageEnabled = true
}


// ----------------------------------------------------------------
// Publication
// ----------------------------------------------------------------

/////// Maven Publishing
// https://docs.gradle.org/current/userguide/publishing_maven.html

def mavenRepoUser = properties.getProperty('maven.repo.user')
def mavenRepoPass = properties.getProperty('maven.repo.pass')

def pomConfig = {
    name "${CBL_GROUP}:${CBL_ARTIFACT_ID}"
    description CBL_DESCRIPTION
    url CBL_SITE_URL
    licenses {
        license {
            name CBL_LICENSE
            url CBL_LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Couchbase Mobile"
            email "mobile@couchbase.com"
            organization 'Couchbase'
            organizationUrl 'http://www.couchbase.com'
        }
    }
    issueManagement {
        system 'github'
        url CBL_ISSUES_URL
    }
    scm {
        url CBL_SITE_URL
        connection CBL_PROJECT_URL
        developerConnection CBL_PROJECT_URL
    }
}

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = "${CBL_ARTIFACT_ID}"
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Generate source.jar
task sourcesJar(type: Jar) {
    archiveBaseName = "${CBL_ARTIFACT_ID}"
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    repositories {
        maven {
            url MAVEN_URL
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {
            libRelease(MavenPublication) {
                groupId CBL_GROUP
                artifactId CBL_ARTIFACT_ID
                version BUILD_VERSION

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    // Workaround for description:
                    root.appendNode('description', CBL_DESCRIPTION)
                    root.children().last() + pomConfig

                    // maven-publish workaround to include dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // Include only configured dependencies
                    configurations.implementation.allDependencies.each {
                        if (DEPENDENCIES.contains(it.name)) {
                            def dep = dependenciesNode.appendNode('dependency')
                            dep.appendNode('groupId', it.group)
                            dep.appendNode('artifactId', it.name)
                            dep.appendNode('version', it.version)
                        }
                    }
                }
            }
            libDebug(MavenPublication) {
                groupId CBL_GROUP
                artifactId CBL_ARTIFACT_ID
                version BUILD_VERSION

                artifact bundleDebugAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    // Workaround for description:
                    root.appendNode('description', CBL_DESCRIPTION)
                    root.children().last() + pomConfig

                    // maven-publish workaround to include dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // Include only configured dependencies
                    configurations.implementation.allDependencies.each {
                        if (DEPENDENCIES.contains(it.name)) {
                            def dep = dependenciesNode.appendNode('dependency')
                            dep.appendNode('groupId', it.group)
                            dep.appendNode('artifactId', it.name)
                            dep.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------

///////// Dev tasks
task smokeTest(dependsOn: ['compileDebugSources', 'checkstyle', 'lint', 'pmd', 'spotbugsHtml'])
task unitTest(dependsOn: ['smokeTest', 'testDebugUnitTest'])
task fullTest(dependsOn: ['unitTest', 'connectedDebugAndroidTest'])

///////// CI tasks
task ciCheck(dependsOn: ['checkstyle', 'lint', 'pmd', 'spotbugsXml', 'test'])
task ciBuild(dependsOn: ['assembleRelease'])
task ciPublish(dependsOn: ['generatePomFileForLibReleasePublication', 'publishLibReleasePublicationToMavenRepository'])

// ordering (roughly last to first)
project.afterEvaluate {
    tasks.withType(Javadoc) { shouldRunAfter connectedDebugAndroidTest }
    connectedDebugAndroidTest.shouldRunAfter unitTest
    connectedDebugAndroidTest.shouldRunAfter smokeTest
    testDebugUnitTest.shouldRunAfter smokeTest
    tasks.withType(SpotBugsTask) { shouldRunAfter tasks.withType(Pmd) }
    tasks.withType(Pmd) { shouldRunAfter tasks.withType(LintGlobalTask) }
    tasks.withType(LintGlobalTask) { shouldRunAfter tasks.withType(Checkstyle) }
    tasks.withType(Checkstyle) { shouldRunAfter compileDebugSources }
}

// Clean
// delete .externalNativeBuild and .cxx directories to force rerun of cmake.
// This is necessary because 'clean' deletes the file 'zconf.h' which is in
// .../build/intermediates, causing subsequent builds to fail.
clean.doLast {
    project.delete "${LIB_MODULE_DIR}/.cxx"
}


// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------

def getLicenseVersion() { return getCommit("product-texts", "master") }

def getBuildId() {
    def hostname = "rogue"
    try { hostname = "hostname".execute().text.trim() }
    catch (Exception ignore) { }

    return "${getCommit("couchbase-lite-java-ce-root", "unofficial").substring(0, 10)}@${hostname}"
}

def getCommit(project, dflt) {
    def manifest = null
    try {
        manifest = new FileReader("${ROOT_DIR}/../manifest.xml")

        def revEx = Pattern.compile("<project.* name=\\\"couchbase-lite-java-ee-root\\\".* revision=\\\"([\\dabcdef]{40})\\\"")

        def l
        while ((l = manifest.readLine()) != null) {
            def m = revEx.matcher(l)
            if (m.find()) { return m.group(1) }
        }
    }
    catch (Exception ignore) { }
    finally {
        if (manifest != null) {
            try { manifest.close() }
            catch (Exception ignore) { }
        }
    }

    return dflt
}

