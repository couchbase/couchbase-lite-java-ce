// Copyright (c) 2017, 2018, 2019 Couchbase, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Please try to keep this build file as similar to the other family build files
// as is possible.
//
import com.github.spotbugs.snom.SpotBugsTask

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem

import java.util.regex.Pattern


// ----------------------------------------------------------------
// Plugins
// ----------------------------------------------------------------

plugins {
    id 'java-library'
    id 'kotlin'
    id 'cpp'
    id 'java-library-distribution'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'maven-publish'

    // handy plugin for discovering task dependencies
    // id "com.dorongold.task-tree" version "2.1.0"
}


// ----------------------------------------------------------------
// Constants
// ----------------------------------------------------------------

ext {
    JAVA_HOME = org.gradle.internal.jvm.Jvm.current().javaHome
    JAVA_INCLUDE = "${JAVA_HOME}/include"

    CBL_GROUP = 'com.couchbase.lite'
    JAR_ARTIFACT = 'couchbase-lite-java'
    CBL_DESCRIPTION = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
    CBL_LICENSE = 'Couchbase, Inc. Community Edition License Agreement'
    CBL_LICENSE_FILE = "LICENSE_community.txt"
    CBL_LICENSE_URL = "https://raw.githubusercontent.com/couchbase/product-texts/${getLicenseVersion()}/mobile/couchbase-lite/license/${CBL_LICENSE_FILE}"
    CBL_PROJECT_URL = 'https://github.com:couchbase/couchbase-lite-java-ce-root'
    CBL_ISSUES_URL = 'https://github.com/couchbase/couchbase-lite-java-ce-root/issues'
    CBL_SITE_URL = 'https://developer.couchbase.com/mobile/'

    BUILD_TIME = Instant.now().toString()
    BUILD_RELEASE = file("${ROOT_DIR}/version.txt").text.trim()
    BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    BUILD_VERSION = "${BUILD_RELEASE}-${BUILD_NUMBER}"
    BUILD_COMMIT = getBuildId()

    CBL_COMMON_ROOT_DIR = "${ROOT_DIR}/common"
    CBL_COMMON_DIR = "${CBL_COMMON_ROOT_DIR}/common"
    CBL_COMMON_JAVA_DIR = "${CBL_COMMON_ROOT_DIR}/java"
    CBL_CE_ROOT_DIR = "${ROOT_DIR}/ce"
    CBL_CE_COMMON_DIR = "${CBL_CE_ROOT_DIR}/common"
    CBL_COMMON_ETC_DIR = "${CBL_COMMON_ROOT_DIR}/etc"

    GENERATED_DIR = "${buildDir}/generated/sources"
    REPORTS_DIR = "${buildDir}/reports"
    ETC_DIR = "${buildDir}/../../etc"

    CBL_CORE_NATIVE_DIR = "${CBL_COMMON_ROOT_DIR}/lite-core"
    CBL_NATIVE_DIR = "${buildDir}/native"
    CBL_JNI_INCLUDE_DIR = "${GENERATED_DIR}/include"

    DEPENDENCIES = ['okio', 'okhttp']
    OKHTTP_VERSION = '4.12.0'
    SPOTBUGS_VERSION = '4.7.3'
}

// Build platform
def PLATFORM = "???"
if (OperatingSystem.current().isWindows()) { PLATFORM = "windows" }
else if (OperatingSystem.current().isLinux()) { PLATFORM = "linux" }
else if (OperatingSystem.current().isMacOsX()) { PLATFORM = "macos" }

// Comma separated list of annotations for tests that should not be run.
// e.g., -PtestFilter='com.couchbase.lite.internal.utils.SlowTest,com.couchbase.lite.internal.utils.VerySlowTest'
def TEST_FILTER = (!project.hasProperty("testFilter")) ? null : testFilter.replaceAll("\\s", "")

// Target repo for maven publish
def MAVEN_URL = (!project.hasProperty("mavenUrl")) ? null : mavenUrl

// Set -Pverbose to get full console logs for tests
def VERBOSE = project.hasProperty("verbose")


// ----------------------------------------------------------------
// Build
// ----------------------------------------------------------------

group = CBL_GROUP
version = BUILD_VERSION

compileJava.options.encoding = "UTF-8"
java {
    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8

    sourceSets {
        main {
            java.srcDirs = [
                "${CBL_COMMON_DIR}/main/java",                   // Common
                "${CBL_COMMON_JAVA_DIR}/main/java",              // Common Java
                "${CBL_CE_COMMON_DIR}/main/java",                // CE Common
                "src/main/java",
                "${GENERATED_DIR}/java",
            ]
            resources.srcDirs = [
                "${CBL_COMMON_JAVA_DIR}/main/resources",         // Resource files
                CBL_NATIVE_DIR,                                  // Native Libraries
            ]
        }
        test {
            java.srcDirs = [
                "${CBL_COMMON_DIR}/test/java",                   // Common tests
                "${CBL_COMMON_JAVA_DIR}/test/java",              // Common Java tests
                "${CBL_CE_COMMON_DIR}/test/java",                // CE Common tests
            ]
            resources.srcDirs = [
                "${CBL_COMMON_DIR}/test/assets",                 // Common test assets
            ]
        }
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.3.0'
    compileOnly "com.github.spotbugs:spotbugs-annotations:${SPOTBUGS_VERSION}"

    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"

    testCompileOnly 'androidx.annotation:annotation:1.3.0'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${KOTLIN_VERSION}"
    testImplementation 'junit:junit:4.13.2'
}

// Copy the version template into the source, inserting build info
task generateCBLVersion(type: Copy) {
    outputs.upToDateWhen { false }
    from("${CBL_COMMON_JAVA_DIR}/templates/CBLVersion.java") {
        filter(
            ReplaceTokens,
            tokens: [
                VERSION: BUILD_VERSION.toString(),
                VARIANT: 'CE',
                TYPE   : 'release',
                BUILD  : BUILD_NUMBER.toString(),
                COMMIT : BUILD_COMMIT.toString()])
    }
    into "${GENERATED_DIR}/java/com/couchbase/lite/internal/core"
}
project.afterEvaluate {
    sourcesJar.dependsOn generateCBLVersion
    compileJava.dependsOn generateCBLVersion
    compileKotlin.dependsOn generateCBLVersion
}


// ----------------------------------------------------------------
// Build Native
// ----------------------------------------------------------------

// For generating JNI headers:
compileJava.options.compilerArgs += ["-h", CBL_JNI_INCLUDE_DIR]

// Native Components:
model {
    platforms {
        windows {
            architecture "x86_64"
            operatingSystem "windows"
        }
        linux {
            architecture "x86_64"
            operatingSystem "linux"
        }
        osx_x86_64 {
            architecture "x86_64"
            operatingSystem "osx"
        }
        osx_aarch64 {
            architecture "osx_aarch64"
            operatingSystem "osx"
        }
    }

    toolChains {
        visualCpp(VisualCpp)

        clang(Clang) {
            // Gradle 7.x still seems to get confused about toolchains on Mac: explicitly add -arch args.
            target("osx_aarch64") {
                cppCompiler.withArguments { args -> args << "-arch" << "arm64" }
                linker.withArguments { args -> args << "-arch" << "arm64" }
            }
            target("osx_x86-64") {
                cppCompiler.withArguments { args -> args << "-arch" << "x86_64" }
                linker.withArguments { args -> args << "-arch" << "x86_64" }
            }
        }

        gcc(Gcc)
    }

    repositories {
        libs(PrebuiltLibraries) {
            liteCore {
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    if (os.windows) {
                        headers.srcDir file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/include")
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/lib/LiteCore.dll")
                        sharedLibraryLinkFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/lib/LiteCore.lib")
                    }
                    else if (os.linux) {
                        headers.srcDir file("${CBL_CORE_NATIVE_DIR}/linux/x86_64/include")
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/linux/x86_64/lib/libLiteCore.so")
                    }
                    else if (os.macOsX) {
                        headers.srcDir file("${CBL_CORE_NATIVE_DIR}/macos/universal/include")
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/macos/universal/lib/libLiteCore.dylib")
                    }
                }
            }
        }
    }

    components {
        LiteCoreJNI(NativeLibrarySpec) {
            if (PLATFORM != "macos") { targetPlatform PLATFORM }
            else {
                targetPlatform "osx_aarch64"
                targetPlatform "osx_x86_64"
            }

            sources {
                cpp {
                    source {
                        srcDir "${CBL_COMMON_DIR}/main/cpp"
                        include "**/*.cc"
                    }
                    lib library: 'liteCore', linkage: 'shared'
                }
            }

            binaries.withType(StaticLibraryBinarySpec) { buildable = false }

            binaries.withType(SharedLibraryBinarySpec) { binary ->
                createBuildJNILibraryTask(binary.sharedLibraryFile, targetPlatform)
            }

            binaries.all {
                if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${CBL_JNI_INCLUDE_DIR}"
                    cppCompiler.args "-I${JAVA_INCLUDE}"
                    cppCompiler.args "-I${JAVA_INCLUDE}/win32"
                    cppCompiler.args '/MD'
                    cppCompiler.args '/EHsc'
                    cppCompiler.args '/wd4068'
                    cppCompiler.args '/std:c++17'
                    linker.args "/def:${ETC_DIR}/ld/jni_win.ld"
                }
                else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args '-I', CBL_JNI_INCLUDE_DIR
                    cppCompiler.args '-I', JAVA_INCLUDE
                    cppCompiler.args '-I', "${JAVA_INCLUDE}/linux"
                    cppCompiler.args '-std=c++17'
                    linker.args "-Wl,--version-script=${ETC_DIR}/ld/jni_gnu.ld"
                }
                else if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', CBL_JNI_INCLUDE_DIR
                    cppCompiler.args '-I', JAVA_INCLUDE
                    cppCompiler.args '-I', "${JAVA_INCLUDE}/darwin"
                    cppCompiler.args '-std=c++17'
                    cppCompiler.args '-stdlib=libc++'
                    linker.args '-stdlib=libc++'
                    linker.args "-Wl,-exported_symbols_list,${ETC_DIR}/ld/jni_osx.ld"
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Javadoc
// ----------------------------------------------------------------

javadoc {
    failOnError false

    exclude "**/internal/**"
    exclude "com/couchbase/lite/utils"

    options {
        title = "${CBL_LICENSE} ${BUILD_VERSION}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        "https://docs.oracle.com/en/java/javase/11/docs/api"
        addStringOption('Xdoclint:none', '-quiet')
        if (JavaVersion.current() > JavaVersion.VERSION_1_8) {
            addStringOption("-release", "8")
            addBooleanOption('-ignore-source-errors', true)
        }
    }
}


// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def FILE_FILTER = ['**/gen/**', "okhttp3/**", "org/json/**"]

/////// Checkstyle
checkstyle {
    toolVersion = "8.42"
    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${toolVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.39.0"
        checkstyle fileTree(dir: "${CBL_COMMON_ETC_DIR}/checkstyle", include: ['kotlin-checks-0.9.jar'])
    }

    configFile = file("${CBL_COMMON_ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${CBL_COMMON_ETC_DIR}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'
    afterEvaluate { dependsOn generateCBLVersion }

    source sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            required = true
            outputLocation = file("${REPORTS_DIR}/checkstyle.xml")
        }
        html {
            required = true
            outputLocation = file("${REPORTS_DIR}/checkstyle.html")
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.26.0'
    ruleSets = []
}
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'
    afterEvaluate { dependsOn generateCBLVersion }

    ruleSetFiles = files("${CBL_COMMON_ETC_DIR}/pmd/pmd.xml")

    source = sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            required = true
            outputLocation = file("${REPORTS_DIR}/pmd.xml")
        }
        html {
            required = true
            outputLocation = file("${REPORTS_DIR}/pmd.html")
        }
    }
}

/////// SpotBugs
// If SpotBug is run on code generated with Java 11
// it will generate quite a few extraneous NULLCHECK warnings.
// Sadly the problem is Java 11 code generation: the only solution
// is to disable the check.
spotbugs { toolVersion = SPOTBUGS_VERSION }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: SpotBugsTask) {
        description "Spotbugs with ${reportType} report"
        group 'verification'

        dependsOn compileJava, processResources

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        sourceDirs = project.files(sourceSets.main.java.srcDirs)

        classDirs = fileTree(dir: "${buildDir}/classes/java/main")

        tasks.findByName("compileJava").classpath.forEach { auxClassPaths += project.files(it) }

        excludeFilter = file("${CBL_COMMON_ETC_DIR}/spotbugs/spotbugs.xml")
        onlyAnalyze = ['com.couchbase.lite.-']

        reports {
            xml {
                required = (reportType == "Xml")
                outputLocation = file("${REPORTS_DIR}//spotbugs.xml")
            }
            html {
                required = (reportType == "Html")
                outputLocation = file("${REPORTS_DIR}//spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
}


// ----------------------------------------------------------------
// Testing
// ----------------------------------------------------------------

compileTestJava.options.encoding = "UTF-8"

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

kotlin { kotlinDaemonJvmArgs = ["-Xmx3072m", "-Xms512m"] }

test {
    if (System.env.LD_LIBRARY_PATH != null) { jvmArgs "-Djava.library.path=${System.env.LD_LIBRARY_PATH}" }

    workingDir = new File(workingDir, ".test-" + new Date().format('yyMMddHHmm'))
    if (!workingDir.exists()) { workingDir.mkdirs() }

    if (TEST_FILTER != null) { exclude TEST_FILTER }

    testLogging {
        outputs.upToDateWhen { false }

        events = ["failed", "skipped"]

        showStandardStreams = VERBOSE

        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }
}


// ----------------------------------------------------------------
// Jar
// ----------------------------------------------------------------

jar { archivesBaseName = JAR_ARTIFACT }


// ----------------------------------------------------------------
// Publication
// ----------------------------------------------------------------

def mavenRepoUser = System.getenv('MAVEN_REPO_USR')
def mavenRepoPass = System.getenv('MAVEN_REPO_PSW')

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = JAR_ARTIFACT
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}
distZip.dependsOn javadocJar
distTar.dependsOn javadocJar

// Generate source.jar
task sourcesJar(type: Jar) {
    archiveBaseName = JAR_ARTIFACT
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

project.afterEvaluate {
    tasks.withType(Tar) { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
    tasks.withType(Zip) { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
}

publishing {
    publications {
        couchbaseLiteJava(MavenPublication) {
            def suffix = (PLATFORM == "linux") ? "" : "-${PLATFORM}"

            groupId CBL_GROUP
            artifactId "${JAR_ARTIFACT}${suffix}"
            version BUILD_VERSION

            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "${CBL_GROUP}:${JAR_ARTIFACT}"
                description = CBL_DESCRIPTION
                url = CBL_SITE_URL
                licenses {
                    license {
                        name = CBL_LICENSE
                        url = CBL_LICENSE_URL
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Couchbase Mobile"
                        email = "mobile@couchbase.com"
                        organization = "Couchbase"
                        organizationUrl = "https://www.couchbase.com"
                    }
                }
                issueManagement {
                    system = "github"
                    url = CBL_ISSUES_URL
                }
                scm {
                    url = CBL_SITE_URL
                    connection = CBL_PROJECT_URL
                    developerConnection = CBL_PROJECT_URL
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // Include only configured dependencies
                    configurations.implementation.allDependencies.each {
                        if (DEPENDENCIES.contains(it.name)) {
                            def dep = dependenciesNode.appendNode('dependency')
                            dep.appendNode('groupId', it.group)
                            dep.appendNode('artifactId', it.name)
                            dep.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url MAVEN_URL
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
        }
    }
}


// ----------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------

///////// Dev tasks
task smokeTest(dependsOn: ['clean', 'compileJava', 'checkstyle', 'pmd', 'spotbugsHtml', 'testClasses'])
task devTest(dependsOn: ['test'])

///////// CI tasks
task ciCheck(dependsOn: ['compileJava', 'checkstyle', 'pmd', 'spotbugsXml', 'testClasses'])
task ciBuild(dependsOn: ['assemble'])
task ciTest(dependsOn: ['test'])
task ciPublish(dependsOn: ['generatePomFileForCouchbaseLiteJavaPublication', 'publishCouchbaseLiteJavaPublicationToMavenRepository'])

// ordering (roughly last to first)
project.afterEvaluate {
    tasks.withType(Javadoc) { shouldRunAfter test }
    test.shouldRunAfter smokeTest
    testClasses.shouldRunAfter tasks.withType(SpotBugsTask)
    tasks.withType(SpotBugsTask) { shouldRunAfter tasks.withType(Pmd) }
    tasks.withType(Pmd) { shouldRunAfter tasks.withType(Checkstyle) }
    tasks.withType(Checkstyle) { shouldRunAfter compileJava }
}

// This task copies LiteCore binaries from their local cache <root>/common/lite-core
// into the "native" directory for this build.
// For MacOS and Windows that is just a single file: the appropriate LiteCore library
// (a universal lib, for MacOS).
// Linux is different because it is where the release binary is built: on Linux
// we not only get the appropriate LiteCore library but LiteCore libs for all of
// the other platforms and their JNI libs as well.
task copyLiteCore(type: Copy) { thisTask ->
    from(CBL_CORE_NATIVE_DIR) {
        exclude "**/include"
        exclude "**/pkgconfig"
        exclude "**/icu"

        if (PLATFORM == "windows") {
            include "windows/x86_64/lib/LiteCore.dll"
        }

        else if (PLATFORM == "macos") {
            include "macos/universal/lib/libLiteCore.dylib"
        }

        // Jenkins constructs the release on Linux: include everything
        else if (PLATFORM == "linux") {
            include "linux/x86_64/lib/libLiteCore.so"

            include "windows/x86_64/lib/LiteCore.dll"
            include "windows/x86_64/lib/LiteCore.dll.MD5"
            include "windows/x86_64/lib/LiteCoreJNI.dll"
            include "windows/x86_64/lib/LiteCoreJNI.dll.MD5"

            include "macos/universal/lib/libLiteCore.dylib"
            include "macos/universal/lib/libLiteCore.dylib.MD5"
            include "macos/x86_64/lib/libLiteCoreJNI.dylib"
            include "macos/x86_64/lib/libLiteCoreJNI.dylib.MD5"
            include "macos/aarch64/lib/libLiteCoreJNI.dylib"
            include "macos/aarch64/lib/libLiteCoreJNI.dylib.MD5"
        }
    }

    into "${CBL_NATIVE_DIR}/libs"
}

// Add an MD5 signature to any native library that doesn't already have one
task signNativeLibs(dependsOn: ["copyLiteCore"]) { thisTask ->
    doLast {
        fileTree(dir: CBL_NATIVE_DIR).each { lib ->
            def fPath = lib.getPath()
            if (!(fPath.endsWith(".MD5") || new File("${fPath}.MD5").exists())) { ant.checksum(file: lib) }
        }
    }
    processResources.dependsOn([thisTask])
}

// Create a task to build the JNI library
def createBuildJNILibraryTask(library, platform) {
    tasks.whenTaskAdded { task ->
        def taskName = task.name.toLowerCase()
        def platformName = platform.name.toLowerCase()
        if ((taskName == "litecorejnisharedlibrary") || (taskName == "litecorejni${platformName}sharedlibrary")) {
            task.dependsOn(compileJava)
            tasks.create(name: "copyJni${platformName}", type: Copy, dependsOn: task) { thisTask ->
                from library
                into "${CBL_NATIVE_DIR}/libs/${getOS(platform)}/${getArch(platform)}/lib"
                signNativeLibs.dependsOn([thisTask])
            }
        }
    }
}


// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------

def getOS(platform) {
    if (platform.operatingSystem.isWindows()) { return "windows" }
    else if (platform.operatingSystem.isLinux()) { return "linux" }
    else if (platform.operatingSystem.isMacOsX()) { return "macos" }
    else { return "${platform.operatingSystem.name}" }
}

def getArch(platform) {
    if (platform.operatingSystem.isWindows()) { return "x86_64" }
    else if (platform.operatingSystem.isLinux()) { return "x86_64" }
    else if (platform.operatingSystem.isMacOsX() && (platform.name == "osx_aarch64")) { return "aarch64" }
    else if (platform.operatingSystem.isMacOsX() && (platform.name == "osx_x86_64")) { return "x86_64" }
    else { return "x86_64" }
}

def getLicenseVersion() { return getCommit("product-texts", "master") }

def getBuildId() {
    def hostname = "rogue"
    try { hostname = "hostname".execute().text.trim() }
    catch (Exception ignore) {}

    return "${getCommit("couchbase-lite-java-ee-root", "unofficial").substring(0, 10)}@${hostname}"
}

def getCommit(project, dflt) {
    def manifest = null
    try {
        manifest = new FileReader("${ROOT_DIR}/../manifest.xml")

        def revEx = Pattern.compile("<project.* name=\"${project}\".* revision=\"([\\dabcdef]{40})\"")

        def l
        while ((l = manifest.readLine()) != null) {
            def m = revEx.matcher(l)
            if (m.find()) { return m.group(1) }
        }
    }
    catch (Exception ignore) {}
    finally {
        if (manifest != null) {
            try { manifest.close() }
            catch (Exception ignore) {}
        }
    }

    return dflt
}

