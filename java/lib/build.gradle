//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Please try to keep this build file as similar to the other family build files
// as is possible.
//
import com.github.spotbugs.SpotBugsTask

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem


// ----------------------------------------------------------------
// Plugins
// ----------------------------------------------------------------

plugins {
    id 'java-library'
    id 'cpp'
    id 'kotlin'
    id 'java-library-distribution'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'

    // handy plugin for discovering task dependencies
    //id 'com.dorongold.task-tree' version "1.5"
}


// ----------------------------------------------------------------
// Constants
// ----------------------------------------------------------------

ext {
    CBL_GROUP = 'com.couchbase.lite'
    CBL_ARTIFACT_ID = 'couchbase-lite-java'
    CBL_DESCRIPTION = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
    CBL_LICENSE = 'Couchbase, Inc. Community Edition License Agreement'
    CBL_LICENSE_URL = "https://raw.githubusercontent.com/couchbase/product-texts/${getLicenseVersion()}/mobile/couchbase-lite/license/LICENSE_community.txt"
    CBL_PROJECT_URL = 'https://github.com:couchbase/couchbase-lite-java-ce-root.git'
    CBL_ISSUES_URL = 'https://github.com/couchbase/couchbase-lite-java-ce-root/issues'
    CBL_SITE_URL = 'https://developer.couchbase.com/mobile/'

    BUILD_RELEASE = file("${ROOT_DIR}/version.txt").text.trim()
    BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    BUILD_VERSION = "${BUILD_RELEASE}-${BUILD_NUMBER}"
    BUILD_COMMIT = getBuildCommit()

    JAVA_HOME = org.gradle.internal.jvm.Jvm.current().javaHome
    JAVA_INCLUDE = "${JAVA_HOME}/include"

    CBL_CORE_DIR = "${ROOT_DIR}/core"
    CBL_CE_ROOT_DIR = "${ROOT_DIR}/ce"
    CBL_COMMON_ROOT_DIR = "${ROOT_DIR}/common"
    CBL_COMMON_DIR= "${CBL_COMMON_ROOT_DIR}/common"
    CBL_CE_COMMON_DIR = "${CBL_CE_ROOT_DIR}/common"
    CBL_COMMON_JAVA_DIR = "${CBL_COMMON_ROOT_DIR}/java"

    CBL_NATIVE_LIBRARIES = []
    CBL_CORE_NATIVE_DIR = "${CBL_COMMON_ROOT_DIR}/lite-core"
    CBL_CRYPTO_LIB = "${CBL_CORE_NATIVE_DIR}/macos/x86_64/libmbedcrypto.a"

    GENERATED_DIR = "${buildDir}/generated/sources"
    REPORTS_DIR = "${buildDir}/reports"
    ETC_DIR = "${CBL_COMMON_ROOT_DIR}/etc"

    CBL_NATIVE_DIR = "${buildDir}/native"
    CBL_JNI_INCLUDE_DIR = "${GENERATED_DIR}/include"
}

// comma separated list of annotations for tests that should not be run.
def TEST_FILTER = (!project.hasProperty("testFilter")) ? null : testFilter

// Target repo for maven publish
def MAVEN_URL = (!project.hasProperty("mavenUrl")) ? null : mavenUrl

// local.properties
Properties properties = new Properties()
properties.load(project.rootProject.file("${PROJECT_DIR}/local.properties").newDataInputStream())


// ----------------------------------------------------------------
// Build
// ----------------------------------------------------------------

group = CBL_GROUP
version = BUILD_VERSION

java {
    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8

    sourceSets {
        main {
            java.srcDirs = [
                "${CBL_COMMON_DIR}/main/java",                   // Common
                "${CBL_COMMON_JAVA_DIR}/main/java",              // Common Java
                "${CBL_CE_COMMON_DIR}/main/java",                // CE Common
                "src/main/java",
                "${GENERATED_DIR}/java",
            ]
            resources.srcDirs = [
                "${CBL_COMMON_JAVA_DIR}/main/resources",         // Resource files
                "${CBL_NATIVE_DIR}",                             // Native Libraries
            ]
        }
        test {
            java.srcDirs = [
                "${CBL_COMMON_DIR}/test/java",                   // Common tests
                "${CBL_COMMON_JAVA_DIR}/test/java",              // Common Java tests
                "${CBL_CE_COMMON_DIR}/test/java",                // CE Common tests
            ]
            resources.srcDirs = [
                "${CBL_CORE_DIR}/C/tests/data",                  // lite-core test assets
                "${CBL_COMMON_DIR}/test/assets",                 // Common test assets
            ]
        }
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    compileOnly 'com.android.support:support-annotations:28.0.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'

    implementation 'com.squareup.okhttp3:okhttp:3.14.4'

    implementation 'org.json:json:20180813'

    testCompileOnly 'com.android.support:support-annotations:28.0.0'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
    testImplementation 'junit:junit:4.12'
}

// Copy the version template into the source, inserting build info
task generateCBLVersion(type: Copy) {
    outputs.upToDateWhen { false }
    from("${CBL_COMMON_JAVA_DIR}/templates/CBLVersion.java") {
        filter(
            ReplaceTokens,
            tokens: [
                VERSION: BUILD_VERSION.toString(),
                VARIANT: 'CE',
                TYPE   : 'release',
                BUILD  : BUILD_NUMBER.toString(),
                COMMIT : BUILD_COMMIT.toString()])
    }
    into "${GENERATED_DIR}/java/com/couchbase/lite/internal/core"
}
compileJava.dependsOn generateCBLVersion


// ----------------------------------------------------------------
// Build Native
// ----------------------------------------------------------------

// For generating JNI headers:
compileJava.options.compilerArgs += ["-h", CBL_JNI_INCLUDE_DIR]

// UTF-8
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

// Native Components:
model {
    platforms {
        osx {
            architecture "x86_64"
            operatingSystem "osx"
        }
        linux {
            architecture "x86_64"
            operatingSystem "linux"
        }
        windows {
            architecture "x86_64"
            operatingSystem "windows"
        }
    }

    toolChains {
        visualCpp(VisualCpp)
        clang(Clang)
    }

    repositories {
        libs(PrebuiltLibraries) {
            liteCore {
                headers.srcDir "${CBL_CORE_DIR}/C/"                             // include c4Private.h for debugging
                headers.srcDir "${CBL_CORE_DIR}/C/include"
                headers.srcDir "${CBL_CORE_DIR}/vendor/fleece/API"
                headers.srcDir "${CBL_CORE_DIR}/vendor/fleece/Fleece/Support"
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    if (os.macOsX) {
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/macos/x86_64/libLiteCore.dylib")
                    } else if (os.linux) {
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/linux/x86_64/libLiteCore.so")
                    } else if (os.windows) {
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/LiteCore.dll")
                        sharedLibraryLinkFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/LiteCore.lib")
                    }
                }
            }
            mbedCrypto {
                headers.srcDir "${CBL_CORE_DIR}/vendor/mbedtls/crypto/include"
                binaries.withType(StaticLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    if (os.macOsX) {
                        staticLibraryFile = file(CBL_CRYPTO_LIB)
                    } else if (os.linux) {
                        staticLibraryFile = file(CBL_CRYPTO_LIB)
                    } else if (os.windows) {
                        staticLibraryFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/mbedcrypto.lib")
                    }
                }
            }
        }
    }

    components {
        LiteCoreJNI(NativeLibrarySpec) {
            if (OperatingSystem.current().isMacOsX()) targetPlatform "osx"
            if (OperatingSystem.current().isLinux()) targetPlatform "linux"
            if (OperatingSystem.current().isWindows()) targetPlatform "windows"
            sources {
                cpp {
                    source {
                        srcDir "${CBL_COMMON_DIR}/main/cpp"
                        include "**/*.cc"
                    }
                    lib library: 'liteCore', linkage: 'shared'
                    lib library: 'mbedCrypto', linkage: 'static'
                }
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }

            binaries.withType(SharedLibraryBinarySpec) { binary ->
                setupJNILibraryBuildTasks(binary.sharedLibraryFile, targetPlatform)
            }

            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', CBL_JNI_INCLUDE_DIR
                    cppCompiler.args '-I', JAVA_INCLUDE
                    cppCompiler.args '-I', "${JAVA_INCLUDE}/darwin"
                    cppCompiler.args '-std=c++11'
                    cppCompiler.args '-stdlib=libc++'
                    linker.args '-stdlib=libc++'
                } else if (targetPlatform.operatingSystem.linux) {
                    def libCxxIncDir = properties.getProperty('LINUX_LIBCXX_INCDIR')
                    if (libCxxIncDir != null) { cppCompiler.args '-isystem', libCxxIncDir }
                    cppCompiler.args '-I', CBL_JNI_INCLUDE_DIR
                    cppCompiler.args '-I', JAVA_INCLUDE
                    cppCompiler.args '-I', "${JAVA_INCLUDE}/linux"
                    cppCompiler.args '-std=c++11'
                    cppCompiler.args '-stdlib=libc++'
                    def libCxxLibDir = properties.getProperty('LINUX_LIBCXX_LIBDIR')
                    if (libCxxLibDir != null) { linker.args '-L', libCxxLibDir }
                    linker.args '-stdlib=libc++'
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${CBL_JNI_INCLUDE_DIR}"
                    cppCompiler.args "-I${JAVA_INCLUDE}"
                    cppCompiler.args "-I${JAVA_INCLUDE}/win32"
                    cppCompiler.args "/MD"
                }
            }
        }
    }
}

/////// JavaDoc
javadoc {
    failOnError false

    exclude "**/internal/**"
    exclude "com/couchbase/lite/utils"

    options {
        title = "${CBL_LICENSE} ${BUILD_VERSION}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        links "https://docs.oracle.com/javase/8/docs/api/"
        addStringOption('Xdoclint:none', '-quiet')
    }
}


// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def FILE_FILTER = ['**/gen/**', "okhttp3/**"]

/////// Checkstyle
checkstyle {
    toolVersion = "8.29"

    configFile file("${ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${ETC_DIR}/checkstyle")]

    showViolations true
}
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    source sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    classpath = files()

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.html"))
        }
    }
}

/////// PMD
pmd {
    toolVersion '6.21.0'
    ruleSets = []
}
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${ETC_DIR}/pmd/pmd.xml")

    source = sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude FILE_FILTER

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.html"))
        }
    }
}

/////// SpotBugs
spotbugs { toolVersion = '3.1.12' }
['Html', 'Xml'].each { reportType ->
    task("spotbugs${reportType}", type: SpotBugsTask) {
        description "Spotbugs with ${reportType} report}"
        group 'verification'

        dependsOn 'compileJava'

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        source = sourceSets.main.java.srcDirs

        classes = fileTree(dir: "${buildDir}/classes/java/main", excludes: FILE_FILTER)
        classpath = files()

        excludeFilter = file("${ETC_DIR}/spotbugs/spotbugs.xml")

        reports {
            xml {
                enabled = (reportType == "Xml")
                setDestination(file("${REPORTS_DIR}/spotbugs.xml"))
            }
            html {
                enabled = (reportType == "Html")
                setDestination(file("${REPORTS_DIR}/spotbugs.html"))
            }
        }
    }
}


// ----------------------------------------------------------------
// Testing
// ----------------------------------------------------------------

test {
    if (TEST_FILTER != null) { exclude "${TEST_FILTER}" }

    testLogging {
        outputs.upToDateWhen { false }

        events = [
            "failed",
            "passed",
            "skipped"
        ]

        //showStandardStreams = true

        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }
}


// ----------------------------------------------------------------
// Jar
// ----------------------------------------------------------------

jar { archivesBaseName = "${CBL_ARTIFACT_ID}" }


// ----------------------------------------------------------------
// Distribution
// ----------------------------------------------------------------

distributions {
    main {
        contents {
            baseName = "${CBL_ARTIFACT_ID}"
            into("support") {
                from "${CBL_CORE_NATIVE_DIR}/support"
            }
            eachFile {
                // Move the main jar file into lib folder
                if (it.name.startsWith("${CBL_ARTIFACT_ID}") &&
                    it.name.endsWith(".jar") &&
                    !it.path.contains("/lib/")) {
                    it.path = it.path.replace("/${CBL_ARTIFACT_ID}", "/lib/${CBL_ARTIFACT_ID}")
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Publication
// ----------------------------------------------------------------

def mavenRepoUser = properties.getProperty('maven.repo.user')
def mavenRepoPass = properties.getProperty('maven.repo.pass')

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = "${CBL_ARTIFACT_ID}"
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Generate source.jar
task sourcesJar(type: Jar) {
    archiveBaseName = "${CBL_ARTIFACT_ID}"
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        couchbaseLiteJava(MavenPublication) {
            groupId CBL_GROUP
            artifactId CBL_ARTIFACT_ID
            version BUILD_VERSION

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "${CBL_GROUP}:${CBL_ARTIFACT_ID}"
                description = CBL_DESCRIPTION
                url = CBL_SITE_URL
                licenses {
                    license {
                        name = CBL_LICENSE
                        url = CBL_LICENSE_URL
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Couchbase Mobile"
                        email = "mobile@couchbase.com"
                        organization = "Couchbase"
                        organizationUrl = "http://www.couchbase.com"
                    }
                }
                issueManagement {
                    system = "github"
                    url = CBL_ISSUES_URL
                }
                scm {
                    url = CBL_SITE_URL
                    connection = CBL_PROJECT_URL
                    developerConnection = CBL_PROJECT_URL
                }
            }
        }
    }

    repositories {
        maven {
            url MAVEN_URL
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
        }
    }
}


// ----------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------

task smokeTest(dependsOn: ['compileJava', 'checkstyle', 'pmd', 'spotbugsHtml'])
task unitTest(dependsOn: ['smokeTest', 'test'])
task fullTest(dependsOn: ['unitTest'])

task ciCheck(dependsOn: ['checkstyle', 'pmd', 'spotbugsXml'])
task ciBuild(dependsOn: ['ciCheck', 'assemble', 'test'])
task ciPublish(dependsOn: ['generatePomFileForCouchbaseLiteJavaPublication', 'publishCouchbaseLiteJavaPublicationToMavenRepository'])
task ciCheckWindows(dependsOn: ['pmd', 'spotbugsXml', 'test'])

// ordering (roughly last to first)
project.afterEvaluate {
    tasks.withType(Javadoc) { shouldRunAfter test }
    test.shouldRunAfter unitTest
    test.shouldRunAfter smokeTest
    tasks.withType(SpotBugsTask) { shouldRunAfter tasks.withType(Pmd) }
    tasks.withType(Pmd) { shouldRunAfter tasks.withType(Checkstyle) }
    tasks.withType(Checkstyle) { shouldRunAfter compileJava }
}


// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------

def getLicenseVersion() { return getGitCommit("${ROOT_DIR}/legal", "master") }

def getBuildCommit() {
    def commit = getGitCommit(PROJECT_DIR, "unknown")
    try {
        if ('git status -uno --porcelain'.execute([], file(PROJECT_DIR)).text.length() <= 0) { commit += "+" }
    }
    catch (Exception ignore) { }
    return commit
}

def getGitCommit(repo, dflt) {
    try { return 'git rev-parse --short HEAD'.execute([], file(repo).text.trim()) }
    catch (Exception ignore) { }
    return dflt
}

def setupJNILibraryBuildTasks(library, platform) {
    tasks.whenTaskAdded { task ->
        if (task.name == "LiteCoreJNISharedLibrary") {
            task.dependsOn(compileJava)
            createCopyNativeLibraryTask(library, platform)
        }
    }
}

def createCopyNativeLibraryTask(library, targetPlatform) {
    if (CBL_NATIVE_LIBRARIES.contains(library)) return

    def libPath = getNativeLibraryResourcePath(targetPlatform)
    task copyJni(type: Copy, dependsOn: LiteCoreJNISharedLibrary) {
        from library
        into "${CBL_NATIVE_DIR}/libs/${libPath}"
    }

    task copyLiteCore(type: Copy, dependsOn: LiteCoreJNISharedLibrary) {
        from ("${CBL_CORE_NATIVE_DIR}") {
            include "macos/**"
            include "linux/**"
            include "windows/**"
            exclude "**/*.a"
            exclude "**/*.lib"
            exclude "**/*.pdb"
        }
        into "${CBL_NATIVE_DIR}/libs"
    }

    task generateNativeLibraryMD5(dependsOn: ["copyJni", "copyLiteCore"]) {
        doFirst {
            fileTree(dir: "${CBL_NATIVE_DIR}/libs", exclude: "**/*.MD5").each { File file ->
                ant.checksum(file: file)
            }
        }
    }

    processResources.dependsOn(["generateNativeLibraryMD5"])
}

def getNativeLibraryResourcePath(platform) {
    def os = ""
    if (platform.operatingSystem.isMacOsX())
        os = "macos";
    else if (platform.operatingSystem.isWindows())
        os = "windows"
    else if (platform.operatingSystem.isLinux())
        os = "linux"
    else
        os = platform.operatingSystem.name
    return "${os}/x86_64"
}

